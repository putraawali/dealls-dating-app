// Code generated by MockGen. DO NOT EDIT.
// Source: swipe_repository.go
//
// Generated by this command:
//
//	mockgen -source=swipe_repository.go -destination=mocks/swipe_repository_mock.go -package=mock_repositories
//

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	models "dealls-dating-app/src/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSwipeRepository is a mock of SwipeRepository interface.
type MockSwipeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSwipeRepositoryMockRecorder
	isgomock struct{}
}

// MockSwipeRepositoryMockRecorder is the mock recorder for MockSwipeRepository.
type MockSwipeRepositoryMockRecorder struct {
	mock *MockSwipeRepository
}

// NewMockSwipeRepository creates a new mock instance.
func NewMockSwipeRepository(ctrl *gomock.Controller) *MockSwipeRepository {
	mock := &MockSwipeRepository{ctrl: ctrl}
	mock.recorder = &MockSwipeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSwipeRepository) EXPECT() *MockSwipeRepositoryMockRecorder {
	return m.recorder
}

// CountSwipeUserToday mocks base method.
func (m *MockSwipeRepository) CountSwipeUserToday(ctx context.Context, userID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountSwipeUserToday", ctx, userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountSwipeUserToday indicates an expected call of CountSwipeUserToday.
func (mr *MockSwipeRepositoryMockRecorder) CountSwipeUserToday(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountSwipeUserToday", reflect.TypeOf((*MockSwipeRepository)(nil).CountSwipeUserToday), ctx, userID)
}

// FindByUserIDAndTargetIDToday mocks base method.
func (m *MockSwipeRepository) FindByUserIDAndTargetIDToday(ctx context.Context, userID, targetID int64) (models.Swipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserIDAndTargetIDToday", ctx, userID, targetID)
	ret0, _ := ret[0].(models.Swipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserIDAndTargetIDToday indicates an expected call of FindByUserIDAndTargetIDToday.
func (mr *MockSwipeRepositoryMockRecorder) FindByUserIDAndTargetIDToday(ctx, userID, targetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserIDAndTargetIDToday", reflect.TypeOf((*MockSwipeRepository)(nil).FindByUserIDAndTargetIDToday), ctx, userID, targetID)
}

// Insert mocks base method.
func (m *MockSwipeRepository) Insert(ctx context.Context, swipe *models.Swipe) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, swipe)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockSwipeRepositoryMockRecorder) Insert(ctx, swipe any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockSwipeRepository)(nil).Insert), ctx, swipe)
}
