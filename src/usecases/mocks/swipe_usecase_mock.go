// Code generated by MockGen. DO NOT EDIT.
// Source: swipe_usecase.go
//
// Generated by this command:
//
//	mockgen -source=swipe_usecase.go -destination=mocks/swipe_usecase_mock.go -package=mock_usecases
//

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	dtos "dealls-dating-app/src/dtos"
	models "dealls-dating-app/src/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSwipeUsecase is a mock of SwipeUsecase interface.
type MockSwipeUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockSwipeUsecaseMockRecorder
	isgomock struct{}
}

// MockSwipeUsecaseMockRecorder is the mock recorder for MockSwipeUsecase.
type MockSwipeUsecaseMockRecorder struct {
	mock *MockSwipeUsecase
}

// NewMockSwipeUsecase creates a new mock instance.
func NewMockSwipeUsecase(ctrl *gomock.Controller) *MockSwipeUsecase {
	mock := &MockSwipeUsecase{ctrl: ctrl}
	mock.recorder = &MockSwipeUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSwipeUsecase) EXPECT() *MockSwipeUsecaseMockRecorder {
	return m.recorder
}

// GetAvailablePartner mocks base method.
func (m *MockSwipeUsecase) GetAvailablePartner(ctx context.Context, userId int64) ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailablePartner", ctx, userId)
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailablePartner indicates an expected call of GetAvailablePartner.
func (mr *MockSwipeUsecaseMockRecorder) GetAvailablePartner(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailablePartner", reflect.TypeOf((*MockSwipeUsecase)(nil).GetAvailablePartner), ctx, userId)
}

// SwipePartner mocks base method.
func (m *MockSwipeUsecase) SwipePartner(ctx context.Context, data dtos.SwipePartnerParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwipePartner", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SwipePartner indicates an expected call of SwipePartner.
func (mr *MockSwipeUsecaseMockRecorder) SwipePartner(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwipePartner", reflect.TypeOf((*MockSwipeUsecase)(nil).SwipePartner), ctx, data)
}
