// Code generated by MockGen. DO NOT EDIT.
// Source: user_usecase.go
//
// Generated by this command:
//
//	mockgen -source=user_usecase.go -destination=mocks/user_usecase_mock.go -package=mock_usecases
//

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	dtos "dealls-dating-app/src/dtos"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserUsecase is a mock of UserUsecase interface.
type MockUserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUsecaseMockRecorder
	isgomock struct{}
}

// MockUserUsecaseMockRecorder is the mock recorder for MockUserUsecase.
type MockUserUsecaseMockRecorder struct {
	mock *MockUserUsecase
}

// NewMockUserUsecase creates a new mock instance.
func NewMockUserUsecase(ctrl *gomock.Controller) *MockUserUsecase {
	mock := &MockUserUsecase{ctrl: ctrl}
	mock.recorder = &MockUserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUsecase) EXPECT() *MockUserUsecaseMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockUserUsecase) Login(ctx context.Context, data dtos.LoginParam) (dtos.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, data)
	ret0, _ := ret[0].(dtos.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserUsecaseMockRecorder) Login(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserUsecase)(nil).Login), ctx, data)
}

// Register mocks base method.
func (m *MockUserUsecase) Register(ctx context.Context, data dtos.RegisterParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockUserUsecaseMockRecorder) Register(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserUsecase)(nil).Register), ctx, data)
}

// VerifyEmail mocks base method.
func (m *MockUserUsecase) VerifyEmail(ctx context.Context, data dtos.VerifyEmailParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmail", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyEmail indicates an expected call of VerifyEmail.
func (mr *MockUserUsecaseMockRecorder) VerifyEmail(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmail", reflect.TypeOf((*MockUserUsecase)(nil).VerifyEmail), ctx, data)
}
